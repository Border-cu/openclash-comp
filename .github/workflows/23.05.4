name: Build OpenClash for OpenWrt 23.05.4 on arm64 v8

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Free disk space
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android /usr/share/swift
          df -h

      - name: Enable universe repository
        run: |
          sudo add-apt-repository universe
          sudo apt-get update

      - name: Install build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential flex bison g++ gawk gcc-multilib g++-multilib gettext git \
            libfuse-dev libncurses5-dev libssl-dev python3 python3-pip python3-ply \
            python3-pyelftools rsync unzip zlib1g-dev file wget subversion patch \
            upx-ucl autoconf automake curl asciidoc binutils bzip2 lib32gcc-s1 \
            libc6-dev-i386 uglifyjs msmtp texinfo libreadline-dev libglib2.0-dev \
            xmlto libelf-dev libtool autopoint antlr3 gperf ccache swig coreutils \
            haveged scons libpython3-dev jq \
            libpam-dev liblzma-dev libsnmp-dev  # 替换为libsnmp-dev

      - name: Clone OpenWrt source
        run: |
          git clone --depth=1 -b v23.05.4 https://github.com/openwrt/openwrt.git openwrt-source
          cd openwrt-source

      - name: Clone OpenClash source
        run: |
          cd openwrt-source
          mkdir -p feeds/packages/net
          git clone --depth=1 https://github.com/vernesong/OpenClash.git feeds/packages/net/openclash

      - name: Update feeds
        run: |
          cd openwrt-source
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Configure build for arm64
        run: |
          cd openwrt-source
          
          # 清除默认配置并设置arm64架构
          make distclean
          make defconfig ARCH=arm64 SUBARCH=arm64 BOARD=generic
          
          # 禁用有依赖问题的包
          cat >> .config << 'EOF'
          # 禁用依赖libpam的包
          CONFIG_PACKAGE_busybox-pam=n
          CONFIG_PACKAGE_policycoreutils=n
          # 禁用依赖liblzma的包
          CONFIG_PACKAGE_kexec-tools=n
          # 禁用依赖libnetsnmp的包
          CONFIG_PACKAGE_lldpd=n
          EOF
          
          # 启用openclash相关配置
          echo "CONFIG_PACKAGE_openclash=y" >> .config
          echo "CONFIG_PACKAGE_kmod-tun=y" >> .config
          echo "CONFIG_PACKAGE_kmod-ipt-nat=y" >> .config
          echo "CONFIG_PACKAGE_kmod-ipt-masq=y" >> .config
          echo "CONFIG_PACKAGE_kmod-ipt-core=y" >> .config
          echo "CONFIG_PACKAGE_kmod-ipt-raw=y" >> .config
          echo "CONFIG_PACKAGE_kmod-ipt-offload=y" >> .config
          echo "CONFIG_PACKAGE_kmod-nf-conntrack=y" >> .config
          echo "CONFIG_PACKAGE_kmod-nf-nat=y" >> .config
          echo "CONFIG_PACKAGE_kmod-nf-flow=y" >> .config
          echo "CONFIG_PACKAGE_kmod-nf-ipt=y" >> .config
          echo "CONFIG_PACKAGE_kmod-nf-ip6tables=y" >> .config
          echo "CONFIG_PACKAGE_kmod-nf-ipt6=y" >> .config
          echo "CONFIG_PACKAGE_kmod-nf-queue=y" >> .config
          echo "CONFIG_PACKAGE_kmod-nf-reject=y" >> .config
          echo "CONFIG_PACKAGE_kmod-nfnetlink=y" >> .config
          
          # 显示配置摘要
          make defconfig dump | grep -E "CONFIG_ARCH|CONFIG_TARGET|CONFIG_PACKAGE_openclash|CONFIG_PACKAGE_kmod"

      - name: Build OpenWrt with OpenClash
        run: |
          cd openwrt-source
          # 使用4线程编译并显示详细输出
          make -j4 V=s

      - name: Check for arm64 packages
        run: |
          echo "=== 检查arm64架构软件包 ==="
          cd openwrt-source
          
          # 定义arm64可能的架构路径
          ARM64_PATHS=(
            "bin/packages/arm64_cortex-a57_neon-vfpv4"
            "bin/packages/aarch64_cortex-a57"
            "bin/packages/aarch64_generic"
            "bin/targets/arm64/generic/packages"
            "bin/targets/arm64/cortex-a53/packages"
            "bin/targets/arm64/cortex-a72/packages"
          )
          
          # 检查每个路径
          OPENCLASH_FOUND=false
          for path in "${ARM64_PATHS[@]}"; do
            echo "检查路径: $path"
            if [ -d "$(eval echo $path)" ]; then
              echo "目录内容:"
              ls -la "$(eval echo $path)"
              
              # 查找OpenClash软件包
              CLASH_PACKAGES=$(find "$(eval echo $path)" -name "openclash_*.ipk" -print)
              if [ -n "$CLASH_PACKAGES" ]; then
                echo "找到OpenClash软件包:"
                echo "$CLASH_PACKAGES"
                OPENCLASH_FOUND=true
              fi
              
              # 查找内核模块
              echo "找到内核模块:"
              find "$(eval echo $path)" -name "kmod-*.ipk" -print | sort
            else
              echo "目录不存在: $path"
            fi
            echo "---"
          done
          
          # 汇总结果
          if [ "$OPENCLASH_FOUND" = true ]; then
            echo "成功找到OpenClash软件包!"
          else
            echo "警告: 未找到arm64架构的OpenClash软件包!"
            echo "找到的所有软件包架构:"
            find bin/ -name "*.ipk" | grep -oE "_([a-z0-9_-]+)\.ipk" | sort | uniq
          fi

      - name: Upload arm64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: openclash-arm64-packages
          path: |
            openwrt-source/bin/packages/arm64_*/openclash_*.ipk
            openwrt-source/bin/packages/arm64_*/kmod-*.ipk
            openwrt-source/bin/targets/arm64/*/packages/openclash_*.ipk
            openwrt-source/bin/targets/arm64/*/packages/kmod-*.ipk
          retention-days: 7
          if-no-files-found: error
